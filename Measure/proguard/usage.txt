com.wave.mzpad.BuildConfig
com.wave.mzpad.R
com.wave.mzpad.R$attr
com.wave.mzpad.R$color
com.wave.mzpad.R$drawable
com.wave.mzpad.R$id
com.wave.mzpad.R$layout
com.wave.mzpad.R$string
com.wave.mzpad.R$style
com.wave.mzpad.R$xml
com.wave.mzpad.activity.MParamDetailsFragment:
    public static final java.lang.String ACTION_CUSTOMIZE_INSERT
com.wave.mzpad.activity.ReportActivity:
    private com.wave.mzpad.model.MeasureParam measureParam
    144:149:private java.util.List getReportData()
com.wave.mzpad.common.Contants:
    public static final int REQUEST_TIMEOUT
    public static final int REPEAT_TIME
    public static final int REQUEST_FAILED
    public static final int REQUEST_SUCCESSED
    public static final int REQUEST_GETDATA
    public static final int SHOW_MSG
    public static final int TOAST_MSG
    public static final int PAGE_MAXSIZE
    public static final byte COMMAND_START
    public static final byte COMMAND_PAUSE
    public static final byte COMMAND_STOP
    public static final byte COMMAND_SAMPLE_INTERVAL
    public static final byte COMMAND_UPLOAD_DATA
    public static final byte COMMAND_ASK
    public static final byte COMMAND_IMMEDIATELY
    public static final byte COMMAND_HEARTBEAT
    public static final byte COMMAND_NASK
    3:3:public Contants()
com.wave.mzpad.common.Contants$Command
com.wave.mzpad.common.Log:
    16:16:public Log()
    54:57:public static void w(java.lang.String,java.lang.String,java.lang.Throwable)
    60:63:public static void v(java.lang.String,java.lang.String)
com.wave.mzpad.common.Utility:
    3:3:public Utility()
    24:24:public static boolean isEmpty(java.lang.StringBuffer)
    35:35:public static boolean isEmpty(java.lang.Object[])
    81:81:public static boolean isEmpty(java.util.Vector)
    85:85:public static java.lang.String dumpHexString(byte[])
    89:115:public static java.lang.String dumpHexString(byte[],int,int)
    141:141:public static java.lang.String toHexString(int)
    145:145:public static java.lang.String toHexString(short)
    155:162:public static byte[] toByteArray(int)
    166:171:public static byte[] toByteArray(short)
    175:182:private static int toByte(char)
    186:193:public static byte[] hexStringToByteArray(java.lang.String)
    210:217:public static java.lang.String byte2Str(byte[])
com.wave.mzpad.db.DAOBase:
    39:39:protected android.content.Context getContext()
    57:58:public void beginTransaction()
    64:65:public void setTransactionSuccessful()
    71:72:public void endTransaction()
    80:88:public int getCount(java.lang.String)
    99:106:public int getCount(java.lang.String,java.lang.String,java.lang.String)
    116:116:protected java.lang.Boolean delete(java.lang.String,java.lang.String)
    173:174:public void execSql(java.lang.String,java.lang.String)
    protected abstract java.lang.String[] getTableNameAndPK()
    protected abstract boolean isExistObject(com.wave.mzpad.model.AbstractObject)
com.wave.mzpad.db.MeasureParamDAO:
    93:93:public boolean deleteMeasureParam(java.lang.String)
    124:124:public boolean updateMeasureParam(java.lang.String,android.content.ContentValues)
com.wave.mzpad.db.MeasureResultDAO:
    95:95:public boolean deleteMeasureResult(java.lang.String)
    105:106:public boolean updateMeasureResult(java.lang.String,com.wave.mzpad.model.MeasureResult)
    116:116:public boolean updateMeasureResult(java.lang.String,android.content.ContentValues)
    134:146:protected boolean isExistObject(com.wave.mzpad.model.AbstractObject)
com.wave.mzpad.db.StandardDataDAO:
    89:89:public boolean deleteStandardData(java.lang.String)
    99:100:public boolean updateStandardData(java.lang.String,com.wave.mzpad.model.StandardData)
    110:110:public boolean updateStandardData(java.lang.String,android.content.ContentValues)
    129:141:protected boolean isExistObject(com.wave.mzpad.model.AbstractObject)
com.wave.mzpad.model.CellElement:
    30:30:public int getX()
    34:35:public void setX(int)
    38:38:public int getY()
    42:43:public void setY(int)
    46:46:public java.lang.String getValue()
    50:51:public void setValue(java.lang.String)
com.wave.mzpad.service.BusinessDataBase:
    127:130:public int calLimitValue(com.wave.mzpad.model.MeasureResult,com.wave.mzpad.model.MeasureParam)
com.wave.mzpad.service.DataUtils:
    6:6:public DataUtils()
com.wave.mzpad.service.JxlExcelUtil:
    65:81:public void createExcel(java.lang.String,java.lang.String)
    163:166:public void colseWritableWorkbook(jxl.write.WritableWorkbook)
com.wave.mzpad.test.TestAndroid
jxl.Cell:
    public abstract boolean isHidden()
jxl.CellFeatures:
    65:65:public java.lang.String getDataValidationList()
    78:78:public jxl.Range getSharedDataValidationRange()
jxl.CellFormat
jxl.CellReferenceHelper:
    33:34:private CellReferenceHelper()
    64:67:public static void getCellReference(int,boolean,int,boolean,java.lang.StringBuffer)
    90:90:public static int getColumn(java.lang.String)
    101:101:public static java.lang.String getColumnReference(int)
    111:111:public static int getRow(java.lang.String)
    122:122:public static boolean isColumnRelative(java.lang.String)
    133:133:public static boolean isRowRelative(java.lang.String)
    150:152:public static void getCellReference(int,int,int,jxl.Workbook,java.lang.StringBuffer)
    170:172:public static void getCellReference(int,int,int,jxl.write.WritableWorkbook,java.lang.StringBuffer)
    194:197:public static void getCellReference(int,int,boolean,int,boolean,jxl.Workbook,java.lang.StringBuffer)
    214:214:public static java.lang.String getCellReference(int,int,int,jxl.Workbook)
    233:233:public static java.lang.String getCellReference(int,int,int,jxl.write.WritableWorkbook)
    246:246:public static java.lang.String getSheet(java.lang.String)
    267:268:public static void getCellReference(jxl.Cell,java.lang.StringBuffer)
jxl.CellView
jxl.DateCell:
    public abstract java.text.DateFormat getDateFormat()
jxl.FormulaCell:
    public abstract java.lang.String getFormula()
jxl.HeaderFooter:
    317:317:public jxl.HeaderFooter$Contents getRight()
    327:327:public jxl.HeaderFooter$Contents getCentre()
    337:337:public jxl.HeaderFooter$Contents getLeft()
    345:346:public void clear()
jxl.HeaderFooter$Contents:
    68:69:public void append(java.lang.String)
    79:80:public void toggleBold()
    90:91:public void toggleUnderline()
    101:102:public void toggleItalics()
    112:113:public void toggleStrikethrough()
    123:124:public void toggleDoubleUnderline()
    134:135:public void toggleSuperScript()
    145:146:public void toggleSubScript()
    156:157:public void toggleOutline()
    167:168:public void toggleShadow()
    181:182:public void setFontName(java.lang.String)
    200:200:public boolean setFontSize(int)
    208:209:public void appendPageNumber()
    216:217:public void appendTotalPages()
    224:225:public void appendDate()
    232:233:public void appendTime()
    240:241:public void appendWorkbookName()
    248:249:public void appendWorkSheetName()
    256:257:public void clear()
jxl.Hyperlink:
    public abstract int getRow()
    public abstract int getColumn()
    public abstract jxl.Range getRange()
    public abstract boolean isFile()
    public abstract boolean isURL()
    public abstract boolean isLocation()
    public abstract int getLastRow()
    public abstract int getLastColumn()
    public abstract java.net.URL getURL()
    public abstract java.io.File getFile()
jxl.Image
jxl.NumberCell:
    public abstract java.text.NumberFormat getNumberFormat()
jxl.Range:
    public abstract int getFirstSheetIndex()
    public abstract int getLastSheetIndex()
jxl.Sheet:
    public abstract jxl.Cell getCell(java.lang.String)
    public abstract jxl.Cell[] getRow(int)
    public abstract jxl.Cell[] getColumn(int)
    public abstract boolean isHidden()
    public abstract boolean isProtected()
    public abstract jxl.Cell findCell(java.lang.String)
    public abstract jxl.Cell findCell(java.lang.String,int,int,int,int,boolean)
    public abstract jxl.Cell findCell(java.util.regex.Pattern,int,int,int,int,boolean)
    public abstract jxl.LabelCell findLabelCell(java.lang.String)
    public abstract jxl.Hyperlink[] getHyperlinks()
    public abstract jxl.Range[] getMergedCells()
    public abstract jxl.format.CellFormat getColumnFormat(int)
    public abstract int getColumnWidth(int)
    public abstract jxl.CellView getColumnView(int)
    public abstract int getRowHeight(int)
    public abstract jxl.CellView getRowView(int)
    public abstract int getNumberOfImages()
    public abstract jxl.Image getDrawing(int)
    public abstract int[] getRowPageBreaks()
    public abstract int[] getColumnPageBreaks()
jxl.SheetSettings:
    private static final double DEFAULT_HEADER_MARGIN
    private static final double DEFAULT_FOOTER_MARGIN
    private static final int DEFAULT_PRINT_RESOLUTION
    private static final double DEFAULT_WIDTH_MARGIN
    private static final double DEFAULT_HEIGHT_MARGIN
    private static final int DEFAULT_DEFAULT_COLUMN_WIDTH
    private static final int DEFAULT_ZOOM_FACTOR
    private static final int DEFAULT_NORMAL_MAGNIFICATION
    private static final int DEFAULT_PAGE_BREAK_PREVIEW_MAGNIFICATION
    public static final int DEFAULT_DEFAULT_ROW_HEIGHT
    552:553:public void setSelected()
    836:837:public void setPassword(java.lang.String)
    942:943:public void setPageBreakPreviewMagnification(int)
    964:965:public void setNormalMagnification(int)
    1294:1296:public void setPrintTitles(int,int,int,int)
jxl.Workbook:
    private static final java.lang.String VERSION
    public abstract jxl.Sheet[] getSheets()
    public abstract java.lang.String[] getSheetNames()
    public abstract jxl.Sheet getSheet(java.lang.String)
    public abstract jxl.Cell findCellByName(java.lang.String)
    public abstract jxl.Cell getCell(java.lang.String)
    public abstract jxl.Range[] findByName(java.lang.String)
    public abstract java.lang.String[] getRangeNames()
    198:198:public static jxl.Workbook getWorkbook(java.io.File)
    213:239:public static jxl.Workbook getWorkbook(java.io.File,jxl.WorkbookSettings)
    286:286:public static jxl.write.WritableWorkbook createWorkbook(java.io.File)
    301:303:public static jxl.write.WritableWorkbook createWorkbook(java.io.File,jxl.WorkbookSettings)
    357:357:public static jxl.write.WritableWorkbook createWorkbook(java.io.OutputStream,jxl.Workbook)
    376:377:public static jxl.write.WritableWorkbook createWorkbook(java.io.OutputStream,jxl.Workbook,jxl.WorkbookSettings)
    393:393:public static jxl.write.WritableWorkbook createWorkbook(java.io.OutputStream)
    411:412:public static jxl.write.WritableWorkbook createWorkbook(java.io.OutputStream,jxl.WorkbookSettings)
jxl.WorkbookSettings:
    public static final int HIDEOBJ_HIDE_ALL
    public static final int HIDEOBJ_SHOW_PLACEHOLDERS
    public static final int HIDEOBJ_SHOW_ALL
    private static final int DEFAULT_INITIAL_FILE_SIZE
    private static final int DEFAULT_ARRAY_GROW_SIZE
    337:338:public void setArrayGrowSize(int)
    360:361:public void setInitialFileSize(int)
    410:411:public void setNamesDisabled(boolean)
    431:432:public void setRationalization(boolean)
    461:462:public void setMergedCellChecking(boolean)
    474:475:public void setPropertySets(boolean)
    507:507:public boolean getFormulaAdjust()
    517:518:public void setFormulaAdjust(boolean)
    529:530:public void setLocale(java.util.Locale)
    559:560:public void setEncoding(java.lang.String)
    595:595:public int getCharacterSet()
    616:617:public void setGCDisabled(boolean)
    626:627:public void setIgnoreBlanks(boolean)
    646:647:public void setCellValidationDisabled(boolean)
    686:687:public void setExcelDisplayLanguage(java.lang.String)
    696:697:public void setExcelRegionalSettings(java.lang.String)
    716:717:public void setAutoFilterDisabled(boolean)
    746:747:public void setUseTemporaryFileDuringWrite(boolean)
    760:761:public void setTemporaryFileDuringWriteDirectory(java.io.File)
jxl.biff.BaseCellFeatures:
    private static final double defaultCommentWidth
    private static final double defaultCommentHeight
    229:230:public void setComment(java.lang.String)
    241:252:public void setComment(java.lang.String,double,double)
    309:317:public void removeSharedDataValidation()
    332:332:public final jxl.biff.drawing.Comment getCommentDrawing()
    342:347:public java.lang.String getDataValidationList()
    359:370:public void setDataValidationList(java.util.Collection)
    379:390:public void setDataValidationRange(int,int,int,int)
    397:408:public void setDataValidationRange(java.lang.String)
    415:426:public void setNumberValidation(double,jxl.biff.BaseCellFeatures$ValidationCondition)
    431:442:public void setNumberValidation(double,double,jxl.biff.BaseCellFeatures$ValidationCondition)
    540:547:public jxl.Range getSharedDataValidationRange()
jxl.biff.BaseCellFeatures$ValidationCondition:
    115:115:public jxl.biff.DVParser$Condition getCondition()
jxl.biff.BaseCompoundFile:
    protected static final int NUM_BIG_BLOCK_DEPOT_BLOCKS_POS
    protected static final int SMALL_BLOCK_DEPOT_BLOCK_POS
    protected static final int NUM_SMALL_BLOCK_DEPOT_BLOCKS_POS
    protected static final int ROOT_START_BLOCK_POS
    protected static final int BIG_BLOCK_SIZE
    protected static final int SMALL_BLOCK_SIZE
    protected static final int EXTENSION_BLOCK_POS
    protected static final int NUM_EXTENSION_BLOCK_POS
    protected static final int PROPERTY_STORAGE_BLOCK_SIZE
    protected static final int BIG_BLOCK_DEPOT_BLOCKS_POS
    protected static final int SMALL_BLOCK_THRESHOLD
    private static final int SIZE_OF_NAME_POS
    private static final int TYPE_POS
    private static final int COLOUR_POS
    private static final int PREVIOUS_POS
    private static final int NEXT_POS
    private static final int CHILD_POS
    private static final int START_BLOCK_POS
    private static final int SIZE_POS
    public static final java.lang.String ROOT_ENTRY_NAME
    public static final java.lang.String WORKBOOK_NAME
    public static final java.lang.String SUMMARY_INFORMATION_NAME
    public static final java.lang.String DOCUMENT_SUMMARY_INFORMATION_NAME
    public static final java.lang.String COMP_OBJ_NAME
    public static final int NONE_PS_TYPE
    public static final int DIRECTORY_PS_TYPE
    public static final int FILE_PS_TYPE
    public static final int ROOT_ENTRY_PS_TYPE
jxl.biff.BuiltInFormat:
    65:65:public java.lang.String getFormatString()
jxl.biff.ByteArray:
    private static final int defaultGrowSize
jxl.biff.CellFinder
jxl.biff.CellReferenceHelper:
    private static final char fixedInd
    private static final char sheetInd
    112:114:public static java.lang.String getColumnReference(int)
    208:210:public static java.lang.String getCellReference(int,int,int,jxl.biff.formula.ExternalSheet)
    339:345:public static java.lang.String getSheet(java.lang.String)
jxl.biff.ConditionalFormat:
    73:74:public void insertColumn(int)
    84:85:public void removeColumn(int)
    95:96:public void removeRow(int)
    106:107:public void insertRow(int)
jxl.biff.ConditionalFormatRangeRecord:
    201:222:private void initialize()
    232:253:public void insertColumn(int)
    264:285:public void removeColumn(int)
    296:317:public void removeRow(int)
    328:349:public void insertRow(int)
jxl.biff.ConditionalFormatRangeRecord$Range:
    public boolean modified
    74:76:public ConditionalFormatRangeRecord$Range()
    86:102:public void insertColumn(int)
    112:128:public void removeColumn(int)
    138:154:public void removeRow(int)
    164:180:public void insertRow(int)
jxl.biff.CountryCode:
    74:78:private CountryCode(int)
    130:130:public static jxl.biff.CountryCode createArbitraryCode(int)
jxl.biff.DVParser:
    private static final int STRING_LIST_GIVEN_MASK
    private static final int EMPTY_CELLS_ALLOWED_MASK
    private static final int SUPPRESS_ARROW_MASK
    private static final int SHOW_PROMPT_MASK
    private static final int SHOW_ERROR_MASK
    private static final int MAX_VALIDATION_LIST_LENGTH
    private static final int MAX_ROWS
    private static final int MAX_COLUMNS
    477:525:public DVParser(java.util.Collection)
    531:573:public DVParser(java.lang.String)
    579:602:public DVParser(int,int,int,int)
    608:632:public DVParser(double,double,jxl.biff.DVParser$Condition)
    816:835:public void insertRow(int)
    844:863:public void insertColumn(int)
    872:891:public void removeRow(int)
    900:919:public void removeColumn(int)
    969:976:java.lang.String getValidationFormula()
    1024:1027:public void extendCellValidation(int,int)
jxl.biff.DVParser$Condition:
    162:162:public java.lang.String getConditionString(java.lang.String,java.lang.String)
jxl.biff.DVParser$DVType:
    85:85:public java.lang.String getDescription()
jxl.biff.DataValidation:
    public static final int DEFAULT_OBJECT_ID
    private static final int MAX_NO_OF_VALIDITY_SETTINGS
    215:220:public void insertRow(int)
    229:243:public void removeRow(int)
    252:257:public void insertColumn(int)
    266:280:public void removeColumn(int)
    313:325:public void removeSharedDataValidation(int,int,int,int)
    333:345:public jxl.biff.DataValiditySettingsRecord getDataValiditySettings(int,int)
jxl.biff.DataValiditySettingsRecord:
    94:97:DataValiditySettingsRecord(jxl.biff.DataValiditySettingsRecord)
    167:173:public void insertRow(int)
    182:188:public void removeRow(int)
    197:203:public void insertColumn(int)
    212:218:public void removeColumn(int)
    303:313:public java.lang.String getValidationFormula()
jxl.biff.DoubleHelper:
    31:32:private DoubleHelper()
jxl.biff.EmptyCell:
    115:115:public void setHidden(boolean)
    123:123:public void setLocked(boolean)
    131:131:public void setAlignment(jxl.format.Alignment)
    139:139:public void setVerticalAlignment(jxl.format.VerticalAlignment)
    148:148:public void setBorder(jxl.format.Border,jxl.format.BorderLineStyle)
    165:165:public void setCellFormat(jxl.CellFormat)
    175:175:public boolean isHidden()
    187:187:public jxl.write.WritableCell copyTo(int,int)
jxl.biff.FontRecord:
    private static final int EXCEL_UNITS_PER_POINT
    342:345:protected void setFontPointSize(int)
    364:367:protected void setFontBoldStyle(int)
    387:390:protected void setFontItalic(boolean)
    410:413:protected void setFontUnderlineStyle(int)
    433:436:protected void setFontColour(int)
    456:459:protected void setFontScriptStyle(int)
    543:544:protected void setFontStruckout(boolean)
jxl.biff.Fonts:
    private static final int numDefaultFonts
jxl.biff.FormatRecord:
    109:113:FormatRecord(java.lang.String,int)
    131:138:protected FormatRecord(jxl.biff.FormatRecord)
    567:567:public int getIndexCode()
    577:577:public java.lang.String getFormatString()
jxl.biff.FormattingRecords:
    private static final int customFormatStartIndex
    private static final int maxFormatRecordsIndex
    private static final int minXFRecords
    350:350:protected final int getNumberOfFormatRecords()
    552:557:public void setColourRGB(jxl.format.Colour,int,int,int)
    566:571:public jxl.format.RGB getColourRGB(jxl.format.Colour)
jxl.biff.HeaderFooter:
    private static final java.lang.String BOLD_TOGGLE
    private static final java.lang.String UNDERLINE_TOGGLE
    private static final java.lang.String ITALICS_TOGGLE
    private static final java.lang.String STRIKETHROUGH_TOGGLE
    private static final java.lang.String DOUBLE_UNDERLINE_TOGGLE
    private static final java.lang.String SUPERSCRIPT_TOGGLE
    private static final java.lang.String SUBSCRIPT_TOGGLE
    private static final java.lang.String OUTLINE_TOGGLE
    private static final java.lang.String SHADOW_TOGGLE
    private static final java.lang.String LEFT_ALIGN
    private static final java.lang.String CENTRE
    private static final java.lang.String RIGHT_ALIGN
    private static final java.lang.String PAGENUM
    private static final java.lang.String TOTAL_PAGENUM
    private static final java.lang.String DATE
    private static final java.lang.String TIME
    private static final java.lang.String WORKBOOK_NAME
    private static final java.lang.String WORKSHEET_NAME
    678:678:protected jxl.biff.HeaderFooter$Contents getRightText()
    688:688:protected jxl.biff.HeaderFooter$Contents getCentreText()
    698:698:protected jxl.biff.HeaderFooter$Contents getLeftText()
    706:709:protected void clear()
jxl.biff.HeaderFooter$Contents:
    191:197:private void appendInternal(java.lang.String)
    206:212:private void appendInternal(char)
    221:222:protected void append(java.lang.String)
    232:233:protected void toggleBold()
    243:244:protected void toggleUnderline()
    254:255:protected void toggleItalics()
    265:266:protected void toggleStrikethrough()
    276:277:protected void toggleDoubleUnderline()
    287:288:protected void toggleSuperScript()
    298:299:protected void toggleSubScript()
    309:310:protected void toggleOutline()
    320:321:protected void toggleShadow()
    335:338:protected void setFontName(java.lang.String)
    356:376:protected boolean setFontSize(int)
    384:385:protected void appendPageNumber()
    392:393:protected void appendTotalPages()
    400:401:protected void appendDate()
    408:409:protected void appendTime()
    416:417:protected void appendWorkbookName()
    424:425:protected void appendWorkSheetName()
    432:433:protected void clear()
jxl.biff.IntegerHelper:
    31:32:private IntegerHelper()
    91:96:public static byte[] getTwoBytes(int)
jxl.biff.PaletteRecord:
    private static final int numColours
    155:155:public boolean isDirty()
    200:211:public jxl.format.RGB getColourRGB(jxl.format.Colour)
jxl.biff.RangeImpl
jxl.biff.SheetRangeImpl:
    136:136:public int getFirstSheetIndex()
    147:147:public int getLastSheetIndex()
    198:212:public void insertRow(int)
    221:235:public void insertColumn(int)
    244:258:public void removeRow(int)
    267:281:public void removeColumn(int)
jxl.biff.Type:
    60:62:private Type(int,jxl.biff.Type$ArbitraryType)
    120:120:public static jxl.biff.Type createType(int)
jxl.biff.WorkbookMethods:
    public abstract jxl.Sheet getReadSheet(int)
jxl.biff.WorkspaceInformationRecord:
    private static final int FIT_TO_PAGES
    private static final int SHOW_ROW_OUTLINE_SYMBOLS
    private static final int SHOW_COLUMN_OUTLINE_SYMBOLS
    private static final int DEFAULT_OPTIONS
jxl.biff.WritableRecordData:
    protected static final int maxRecordLength
jxl.biff.XFRecord:
    private static final int USE_FONT
    private static final int USE_FORMAT
    private static final int USE_ALIGNMENT
    private static final int USE_BORDER
    private static final int USE_BACKGROUND
    private static final int USE_PROTECTION
    private static final int USE_DEFAULT_VALUE
    519:605:protected XFRecord(jxl.format.CellFormat)
    800:802:protected final void setXFLocked(boolean)
    811:812:protected final void setXFCellOptions(int)
    835:838:protected void setXFIndentation(int)
    847:850:protected void setXFShrinkToFit(boolean)
    859:864:public jxl.format.Alignment getAlignment()
    874:879:public int getIndentation()
    889:894:public boolean isShrinkToFit()
    904:909:public boolean isLocked()
    920:925:public jxl.format.VerticalAlignment getVerticalAlignment()
    935:940:public jxl.format.Orientation getOrientation()
    953:957:protected void setXFBackground(jxl.format.Colour,jxl.format.Pattern)
    966:971:public jxl.format.Colour getBackgroundColour()
    981:986:public jxl.format.Pattern getPattern()
    1014:1017:protected void setXFOrientation(jxl.format.Orientation)
    1028:1031:protected void setXFWrap(boolean)
    1040:1045:public boolean getWrap()
    1102:1102:public jxl.format.BorderLineStyle getBorder(jxl.format.Border)
    1279:1280:final void setXFIndex(int)
    1321:1325:public jxl.format.Format getFormat()
jxl.biff.drawing.BStoreContainer:
    88:90:public jxl.biff.drawing.BlipStoreEntry getDrawing(int)
jxl.biff.drawing.BlipStoreEntry:
    private static final int IMAGE_DATA_OFFSET
    113:113:public jxl.biff.drawing.BlipType getBlipType()
    187:189:void dereference()
    198:198:int getReferenceCount()
jxl.biff.drawing.BlipType:
    66:66:public java.lang.String getDescription()
jxl.biff.drawing.Button:
    private double width
    private double height
    private int referenceCount
    private jxl.biff.drawing.EscherContainer escherData
    328:333:public final int getBlipId()
    413:413:public jxl.biff.drawing.DrawingGroup getDrawingGroup()
    433:433:public int getReferenceCount()
    443:444:public void setReferenceCount(int)
    453:457:public double getX()
    468:478:public void setX(double)
    487:492:public double getY()
    502:512:public void setY(double)
    522:527:public double getWidth()
    537:547:public void setWidth(double)
    556:561:public double getHeight()
    571:581:public void setHeight(double)
    606:613:public byte[] getImageData()
    623:623:public jxl.biff.drawing.ShapeType getType()
    663:664:public byte[] getImageBytes()
    775:775:public int getRow()
    786:786:public int getColumn()
    833:839:public void setButtonText(java.lang.String)
jxl.biff.drawing.CheckBox:
    private jxl.biff.drawing.EscherContainer spContainer
    private double width
    private double height
    private jxl.biff.drawing.EscherContainer escherData
    329:334:public final int getBlipId()
    406:406:public jxl.biff.drawing.DrawingGroup getDrawingGroup()
    426:426:public int getReferenceCount()
    436:437:public void setReferenceCount(int)
    446:450:public double getX()
    461:471:public void setX(double)
    480:485:public double getY()
    495:505:public void setY(double)
    515:520:public double getWidth()
    530:540:public void setWidth(double)
    549:554:public double getHeight()
    564:574:public void setHeight(double)
    599:606:public byte[] getImageData()
    616:616:public jxl.biff.drawing.ShapeType getType()
    626:627:public byte[] getImageBytes()
    696:696:public int getRow()
    706:706:public int getColumn()
jxl.biff.drawing.Chunk
jxl.biff.drawing.ChunkType
jxl.biff.drawing.ComboBox:
    private jxl.biff.drawing.EscherContainer spContainer
    private double width
    private double height
    private jxl.biff.drawing.EscherContainer escherData
    304:309:public final int getBlipId()
    381:381:public jxl.biff.drawing.DrawingGroup getDrawingGroup()
    401:401:public int getReferenceCount()
    411:412:public void setReferenceCount(int)
    421:425:public double getX()
    436:446:public void setX(double)
    455:460:public double getY()
    470:480:public void setY(double)
    490:495:public double getWidth()
    505:515:public void setWidth(double)
    524:529:public double getHeight()
    539:549:public void setHeight(double)
    574:581:public byte[] getImageData()
    591:591:public jxl.biff.drawing.ShapeType getType()
    601:602:public byte[] getImageBytes()
    657:657:public int getRow()
    667:667:public int getColumn()
jxl.biff.drawing.Comment:
    private jxl.biff.drawing.EscherContainer escherData
    358:363:public final int getBlipId()
    441:441:public jxl.biff.drawing.DrawingGroup getDrawingGroup()
    461:461:public int getReferenceCount()
    471:472:public void setReferenceCount(int)
    481:485:public double getX()
    496:506:public void setX(double)
    515:520:public double getY()
    530:540:public void setY(double)
    634:641:public byte[] getImageData()
    651:651:public jxl.biff.drawing.ShapeType getType()
    701:702:public byte[] getImageBytes()
    877:883:public void setCommentText(java.lang.String)
jxl.biff.drawing.Dg:
    85:85:public int getDrawingId()
    95:95:int getShapeCount()
jxl.biff.drawing.Dgg:
    194:194:int getShapesSaved()
    204:204:int getDrawingsSaved()
jxl.biff.drawing.Drawing:
    private jxl.biff.drawing.EscherContainer escherData
    private jxl.biff.drawing.PNGReader pngReader
    private static final double DEFAULT_FONT_SIZE
    281:292:public Drawing(double,double,double,double,java.io.File)
    308:319:public Drawing(double,double,double,double,byte[])
    399:399:public java.io.File getImageFile()
    555:555:public jxl.biff.drawing.DrawingGroup getDrawingGroup()
    595:599:public double getX()
    609:619:public void setX(double)
    628:633:public double getY()
    643:653:public void setY(double)
    663:668:public double getWidth()
    678:688:public void setWidth(double)
    697:702:public double getHeight()
    712:722:public void setHeight(double)
    791:791:public jxl.biff.drawing.ShapeType getType()
    833:833:public double getColumn()
    843:843:public double getRow()
    877:881:public void removeRow(int)
    891:944:private double getWidthInPoints()
    955:994:private double getHeightInPoints()
    1005:1006:public double getWidth(jxl.common.LengthUnit)
    1018:1019:public double getHeight(jxl.common.LengthUnit)
    1032:1032:public int getImageWidth()
    1044:1044:public int getImageHeight()
    1056:1057:public double getHorizontalResolution(jxl.common.LengthUnit)
    1068:1069:public double getVerticalResolution(jxl.common.LengthUnit)
    1074:1099:private jxl.biff.drawing.PNGReader getPngReader()
    1107:1113:protected void setImageAnchor(jxl.biff.drawing.Drawing$ImageAnchorProperties)
    1120:1125:protected jxl.biff.drawing.Drawing$ImageAnchorProperties getImageAnchor()
jxl.biff.drawing.Drawing2:
    private java.io.File imageFile
    private byte[] imageData
    private double x
    private double y
    private double width
    private double height
    private int referenceCount
    private jxl.biff.drawing.EscherContainer escherData
    private jxl.biff.drawing.ShapeType type
    private int drawingNumber
    171:181:protected Drawing2(jxl.biff.drawing.DrawingGroupObject,jxl.biff.drawing.DrawingGroup)
    197:207:public Drawing2(double,double,double,double,java.io.File)
    223:233:public Drawing2(double,double,double,double,byte[])
    300:305:public final int getBlipId()
    353:353:public jxl.biff.drawing.DrawingGroup getDrawingGroup()
    373:373:public int getReferenceCount()
    383:384:public void setReferenceCount(int)
    393:397:public double getX()
    407:417:public void setX(double)
    426:431:public double getY()
    441:451:public void setY(double)
    461:466:public double getWidth()
    476:486:public void setWidth(double)
    495:500:public double getHeight()
    510:520:public void setHeight(double)
    545:553:public byte[] getImageData()
    563:581:public byte[] getImageBytes()
    591:591:public jxl.biff.drawing.ShapeType getType()
    625:625:public double getColumn()
    635:635:public double getRow()
    669:673:public void removeRow(int)
jxl.biff.drawing.DrawingGroup:
    304:343:public void remove(jxl.biff.drawing.DrawingGroupObject)
    517:517:final int getNumberOfBlips()
jxl.biff.drawing.DrawingGroupObject:
    public abstract int getBlipId()
    public abstract jxl.biff.drawing.DrawingGroup getDrawingGroup()
    public abstract int getReferenceCount()
    public abstract void setReferenceCount(int)
    public abstract double getX()
    public abstract void setX(double)
    public abstract double getY()
    public abstract void setY(double)
    public abstract double getWidth()
    public abstract void setWidth(double)
    public abstract double getHeight()
    public abstract void setHeight(double)
    public abstract jxl.biff.drawing.ShapeType getType()
    public abstract byte[] getImageData()
    public abstract byte[] getImageBytes()
jxl.biff.drawing.EscherContainer:
    107:108:public void remove(jxl.biff.drawing.EscherRecord)
jxl.biff.drawing.EscherDisplay
jxl.biff.drawing.EscherRecord:
    protected static final int HEADER_LENGTH
    194:194:protected jxl.biff.drawing.EscherRecordData getEscherData()
jxl.biff.drawing.EscherRecordData:
    162:162:public int getRecordId()
    172:172:jxl.biff.drawing.EscherStream getDrawingGroup()
    238:239:void setLength(int)
jxl.biff.drawing.NoteRecord:
    80:82:public NoteRecord(byte[])
jxl.biff.drawing.ObjRecord:
    private static final int COMMON_DATA_LENGTH
    private static final int CLIPBOARD_FORMAT_LENGTH
    private static final int PICTURE_OPTION_LENGTH
    private static final int NOTE_STRUCTURE_LENGTH
    private static final int COMBOBOX_STRUCTURE_LENGTH
    private static final int END_LENGTH
jxl.biff.drawing.PNGReader
jxl.biff.drawing.SheetDrawingWriter:
    private jxl.WorkbookSettings workbookSettings
jxl.biff.drawing.TextObjectRecord:
    80:82:public TextObjectRecord(byte[])
jxl.biff.formula.Area:
    125:125:int getFirstRow()
    145:145:int getLastRow()
    239:258:public void adjustRelativeCellReferences(int,int)
    272:286:void columnInserted(int,int,boolean)
    300:314:void columnRemoved(int,int,boolean)
    328:348:void rowInserted(int,int,boolean)
    362:382:void rowRemoved(int,int,boolean)
    422:422:void handleImportedCellReferences()
jxl.biff.formula.Area3d:
    163:163:int getFirstRow()
    183:183:int getLastRow()
    280:299:public void adjustRelativeCellReferences(int,int)
    313:327:public void columnInserted(int,int,boolean)
    341:355:void columnRemoved(int,int,boolean)
    369:389:void rowInserted(int,int,boolean)
    403:423:void rowRemoved(int,int,boolean)
    465:466:void handleImportedCellReferences()
jxl.biff.formula.Attribute:
    private static final int SUM_MASK
    private static final int IF_MASK
    private static final int CHOOSE_MASK
    private static final int GOTO_MASK
    138:138:public boolean isFunction()
    168:168:public boolean isGoto()
    387:402:public void adjustRelativeCellReferences(int,int)
    416:431:void columnInserted(int,int,boolean)
    445:460:void columnRemoved(int,int,boolean)
    474:489:void rowInserted(int,int,boolean)
    503:518:void rowRemoved(int,int,boolean)
    527:542:void handleImportedCellReferences()
jxl.biff.formula.BinaryOperator:
    89:92:public void adjustRelativeCellReferences(int,int)
    106:109:void columnInserted(int,int,boolean)
    123:126:void columnRemoved(int,int,boolean)
    140:143:void rowInserted(int,int,boolean)
    157:160:void rowRemoved(int,int,boolean)
    214:217:void handleImportedCellReferences()
jxl.biff.formula.BooleanValue:
    96:96:void handleImportedCellReferences()
jxl.biff.formula.BuiltInFunction:
    147:153:public void adjustRelativeCellReferences(int,int)
    167:172:void columnInserted(int,int,boolean)
    186:191:void columnRemoved(int,int,boolean)
    206:211:void rowInserted(int,int,boolean)
    225:230:void rowRemoved(int,int,boolean)
    239:244:void handleImportedCellReferences()
jxl.biff.formula.CellReference:
    119:119:public int getColumn()
    129:129:public int getRow()
    184:193:public void adjustRelativeCellReferences(int,int)
    207:216:public void columnInserted(int,int,boolean)
    230:239:void columnRemoved(int,int,boolean)
    253:262:void rowInserted(int,int,boolean)
    276:285:void rowRemoved(int,int,boolean)
    295:295:void handleImportedCellReferences()
jxl.biff.formula.CellReference3d:
    150:150:public int getColumn()
    160:160:public int getRow()
    215:224:public void adjustRelativeCellReferences(int,int)
    238:247:public void columnInserted(int,int,boolean)
    262:271:void columnRemoved(int,int,boolean)
    285:294:void rowInserted(int,int,boolean)
    308:317:void rowRemoved(int,int,boolean)
    326:327:void handleImportedCellReferences()
jxl.biff.formula.CellReferenceError:
    87:87:void handleImportedCellReferences()
jxl.biff.formula.ColumnRange3d:
    54:56:ColumnRange3d(jxl.biff.formula.ExternalSheet)
jxl.biff.formula.DoubleValue:
    123:123:void handleImportedCellReferences()
jxl.biff.formula.ErrorConstant:
    97:97:void handleImportedCellReferences()
jxl.biff.formula.ExternalSheet:
    public abstract int getExternalSheetIndex(int)
    public abstract int getLastExternalSheetIndex(java.lang.String)
    public abstract int getLastExternalSheetIndex(int)
jxl.biff.formula.FormulaException$FormulaMessage:
    56:56:public java.lang.String getMessage()
jxl.biff.formula.FormulaParser:
    151:152:public void adjustRelativeCellReferences(int,int)
    198:199:public void columnInserted(int,int,boolean)
    213:214:public void columnRemoved(int,int,boolean)
    228:229:public void rowInserted(int,int,boolean)
    243:244:public void rowRemoved(int,int,boolean)
    254:254:public boolean handleImportedCellReferences()
jxl.biff.formula.IntegerValue:
    129:129:void handleImportedCellReferences()
jxl.biff.formula.MemArea:
    73:73:void handleImportedCellReferences()
jxl.biff.formula.MemFunc:
    49:49:void handleImportedCellReferences()
jxl.biff.formula.Minus:
    65:65:void handleImportedCellReferences()
jxl.biff.formula.MissingArg:
    77:77:void handleImportedCellReferences()
jxl.biff.formula.Name:
    77:78:void handleImportedCellReferences()
jxl.biff.formula.NameRange:
    147:148:void handleImportedCellReferences()
jxl.biff.formula.Operand:
    44:44:public void adjustRelativeCellReferences(int,int)
    56:56:void columnInserted(int,int,boolean)
    70:70:void columnRemoved(int,int,boolean)
    84:84:void rowInserted(int,int,boolean)
    98:98:void rowRemoved(int,int,boolean)
jxl.biff.formula.Parenthesis:
    75:77:public void adjustRelativeCellReferences(int,int)
    91:93:void columnInserted(int,int,boolean)
    107:109:void columnRemoved(int,int,boolean)
    123:125:void rowInserted(int,int,boolean)
    139:141:void rowRemoved(int,int,boolean)
    150:152:void handleImportedCellReferences()
jxl.biff.formula.ParseItem:
    95:100:protected final void setInvalid()
    119:119:final boolean isValid()
    abstract void adjustRelativeCellReferences(int,int)
    abstract void columnInserted(int,int,boolean)
    abstract void columnRemoved(int,int,boolean)
    abstract void rowInserted(int,int,boolean)
    abstract void rowRemoved(int,int,boolean)
    abstract void handleImportedCellReferences()
jxl.biff.formula.ParsedThing
jxl.biff.formula.Parser:
    public abstract void adjustRelativeCellReferences(int,int)
    public abstract void columnInserted(int,int,boolean)
    public abstract void columnRemoved(int,int,boolean)
    public abstract void rowInserted(int,int,boolean)
    public abstract void rowRemoved(int,int,boolean)
    public abstract boolean handleImportedCellReferences()
jxl.biff.formula.Percent:
    53:55:void handleImportedCellReferences()
jxl.biff.formula.Plus:
    61:61:void handleImportedCellReferences()
jxl.biff.formula.SharedFormulaArea:
    59:59:int getFirstColumn()
    64:64:int getFirstRow()
    69:69:int getLastColumn()
    74:74:int getLastRow()
    161:161:void handleImportedCellReferences()
jxl.biff.formula.SharedFormulaCellReference:
    108:108:public int getColumn()
    113:113:public int getRow()
    158:158:void handleImportedCellReferences()
jxl.biff.formula.StringFormulaParser:
    470:471:public void adjustRelativeCellReferences(int,int)
    485:486:public void columnInserted(int,int,boolean)
    501:502:public void columnRemoved(int,int,boolean)
    516:517:public void rowInserted(int,int,boolean)
    531:532:public void rowRemoved(int,int,boolean)
    572:573:public boolean handleImportedCellReferences()
jxl.biff.formula.StringOperator:
    89:90:public void adjustRelativeCellReferences(int,int)
    103:104:void columnInserted(int,int,boolean)
    118:119:void columnRemoved(int,int,boolean)
    133:134:void rowInserted(int,int,boolean)
    148:149:void rowRemoved(int,int,boolean)
jxl.biff.formula.StringParseItem:
    63:63:public void adjustRelativeCellReferences(int,int)
    75:75:void columnInserted(int,int,boolean)
    89:89:void columnRemoved(int,int,boolean)
    103:103:void rowInserted(int,int,boolean)
    117:117:void rowRemoved(int,int,boolean)
    126:126:void handleImportedCellReferences()
jxl.biff.formula.StringValue:
    130:130:void handleImportedCellReferences()
jxl.biff.formula.SubExpression:
    66:66:public void getOperands(java.util.Stack)
    89:89:int getPrecedence()
jxl.biff.formula.Token:
    89:96:private Token(int,int,int,int)
    105:113:private Token(int,int,int,int,int)
jxl.biff.formula.TokenFormulaParser:
    484:485:public void adjustRelativeCellReferences(int,int)
    510:511:public void columnInserted(int,int,boolean)
    524:525:public void columnRemoved(int,int,boolean)
    539:540:public void rowInserted(int,int,boolean)
    554:555:public void rowRemoved(int,int,boolean)
    565:566:public boolean handleImportedCellReferences()
jxl.biff.formula.UnaryMinus:
    67:67:void handleImportedCellReferences()
jxl.biff.formula.UnaryOperator:
    79:81:public void adjustRelativeCellReferences(int,int)
    95:97:void columnInserted(int,int,boolean)
    111:113:void columnRemoved(int,int,boolean)
    127:129:void rowInserted(int,int,boolean)
    143:145:void rowRemoved(int,int,boolean)
    187:189:void handleImportedCellReferences()
jxl.biff.formula.UnaryPlus:
    67:67:void handleImportedCellReferences()
jxl.biff.formula.Union
jxl.biff.formula.VariableArgFunction:
    173:179:public void adjustRelativeCellReferences(int,int)
    193:198:void columnInserted(int,int,boolean)
    212:217:void columnRemoved(int,int,boolean)
    231:236:void rowInserted(int,int,boolean)
    250:255:void rowRemoved(int,int,boolean)
    264:269:void handleImportedCellReferences()
jxl.biff.formula.Yylex:
    public static final int YYEOF
    private static final int ZZ_BUFFERSIZE
    public static final int YYSTRING
    public static final int YYINITIAL
    private static final java.lang.String ZZ_CMAP_PACKED
    private static final java.lang.String ZZ_ACTION_PACKED_0
    private static final java.lang.String ZZ_ROWMAP_PACKED_0
    private static final java.lang.String ZZ_TRANS_PACKED_0
    private static final int ZZ_UNKNOWN_ERROR
    private static final int ZZ_NO_MATCH
    private static final int ZZ_PUSHBACK_2BIG
    private static final java.lang.String ZZ_ATTRIBUTE_PACKED_0
    private int yycolumn
    360:361:Yylex(java.io.InputStream)
    431:436:public final void yyclose()
    450:457:public final void yyreset(java.io.Reader)
    464:464:public final int yystate()
    498:498:public final char yycharat(int)
    506:506:public final int yylength()
    546:550:public void yypushback(int)
jxl.common.Assert:
    25:25:public Assert()
jxl.common.BaseUnit
jxl.common.LengthConverter
jxl.common.LengthUnit
jxl.common.Logger:
    public abstract void debug(java.lang.Object)
    public abstract void debug(java.lang.Object,java.lang.Throwable)
    public abstract void error(java.lang.Object,java.lang.Throwable)
    public abstract void fatal(java.lang.Object)
    public abstract void fatal(java.lang.Object,java.lang.Throwable)
    public abstract void info(java.lang.Object)
    public abstract void info(java.lang.Object,java.lang.Throwable)
jxl.common.log.LoggerName:
    27:27:public LoggerName()
jxl.common.log.SimpleLogger:
    47:52:public void debug(java.lang.Object)
    59:65:public void debug(java.lang.Object,java.lang.Throwable)
    81:84:public void error(java.lang.Object,java.lang.Throwable)
    91:93:public void fatal(java.lang.Object)
    100:103:public void fatal(java.lang.Object,java.lang.Throwable)
    110:114:public void info(java.lang.Object)
    122:127:public void info(java.lang.Object,java.lang.Throwable)
jxl.demo.BiffDump
jxl.demo.CSV
jxl.demo.Demo
jxl.demo.Escher
jxl.demo.EscherDrawingGroup
jxl.demo.Features
jxl.demo.Formulas
jxl.demo.PropertySetsReader
jxl.demo.ReadWrite
jxl.demo.Write
jxl.demo.WriteAccess
jxl.demo.XML
jxl.format.Alignment:
    78:78:public java.lang.String getDescription()
jxl.format.BoldStyle
jxl.format.Border:
    45:45:public java.lang.String getDescription()
jxl.format.CellFormat:
    public abstract jxl.format.Format getFormat()
    public abstract boolean getWrap()
    public abstract jxl.format.Alignment getAlignment()
    public abstract jxl.format.VerticalAlignment getVerticalAlignment()
    public abstract jxl.format.Orientation getOrientation()
    public abstract jxl.format.BorderLineStyle getBorder(jxl.format.Border)
    public abstract jxl.format.BorderLineStyle getBorderLine(jxl.format.Border)
    public abstract jxl.format.Colour getBorderColour(jxl.format.Border)
    public abstract boolean hasBorders()
    public abstract jxl.format.Colour getBackgroundColour()
    public abstract jxl.format.Pattern getPattern()
    public abstract int getIndentation()
    public abstract boolean isShrinkToFit()
    public abstract boolean isLocked()
jxl.format.Colour:
    89:89:public java.lang.String getDescription()
    101:101:public int getDefaultRed()
    113:113:public int getDefaultGreen()
    125:125:public int getDefaultBlue()
jxl.format.Format:
    public abstract java.lang.String getFormatString()
jxl.format.Orientation:
    72:72:public java.lang.String getDescription()
jxl.format.PaperSize:
    private static final int LAST_PAPER_SIZE
jxl.format.Pattern:
    79:79:public java.lang.String getDescription()
jxl.format.ScriptStyle:
    81:81:public java.lang.String getDescription()
jxl.format.UnderlineStyle:
    80:80:public java.lang.String getDescription()
jxl.format.VerticalAlignment:
    73:73:public java.lang.String getDescription()
jxl.read.biff.BOFRecord:
    private static final int Biff8
    private static final int Biff7
    private static final int WorkbookGlobals
    private static final int Worksheet
    private static final int Chart
    private static final int MacroSheet
    137:137:public boolean isMacroSheet()
jxl.read.biff.BaseSharedFormulaRecord:
    private java.lang.String formulaString
    92:101:public java.lang.String getFormula()
jxl.read.biff.BiffRecordReader
jxl.read.biff.BooleanFormulaRecord:
    private java.lang.String formulaString
    153:164:public java.lang.String getFormula()
jxl.read.biff.CellValue:
    158:172:public boolean isHidden()
jxl.read.biff.DateFormulaRecord:
    private java.lang.String formulaString
    118:129:public java.lang.String getFormula()
    139:139:public double getValue()
    149:149:public java.text.NumberFormat getNumberFormat()
jxl.read.biff.DateRecord:
    private static final int nonLeapDay
    private static final int utcOffsetDays
    private static final int utcOffsetDays1904
    private static final long secondsInADay
    private static final long msInASecond
    private static final long msInADay
    270:272:public java.text.DateFormat getDateFormat()
    299:313:public boolean isHidden()
jxl.read.biff.ErrorFormulaRecord:
    private java.lang.String formulaString
    161:172:public java.lang.String getFormula()
jxl.read.biff.ExternalSheetRecord:
    180:180:public byte[] getData()
jxl.read.biff.File:
    170:172:public File(byte[])
    274:287:private void moveToFirstBof()
    296:296:public void close()
jxl.read.biff.Formula
jxl.read.biff.HyperlinkRecord:
    397:397:public jxl.Range getRange()
jxl.read.biff.MulBlankCell:
    166:180:public boolean isHidden()
jxl.read.biff.NameRecord:
    private static final int commandMacro
    private static final int builtIn
    private static final int cellReference
    private static final int areaReference
    private static final int subExpression
    private static final int union
    547:548:public void setSheetRef(int)
jxl.read.biff.NumberFormulaRecord:
    private java.lang.String formulaString
    172:183:public java.lang.String getFormula()
    194:194:public java.text.NumberFormat getNumberFormat()
jxl.read.biff.NumberRecord:
    118:118:public java.text.NumberFormat getNumberFormat()
jxl.read.biff.NumberValue:
    204:218:public boolean isHidden()
    229:229:public java.text.NumberFormat getNumberFormat()
jxl.read.biff.PaletteRecord
jxl.read.biff.PasswordRecord:
    private java.lang.String password
jxl.read.biff.RKHelper:
    31:32:private RKHelper()
jxl.read.biff.RKRecord:
    117:117:public java.text.NumberFormat getNumberFormat()
jxl.read.biff.RowRecord:
    private static final int defaultHeightIndicator
jxl.read.biff.SharedDateFormulaRecord:
    86:86:public double getValue()
    182:182:public java.text.DateFormat getDateFormat()
jxl.read.biff.SharedErrorFormulaRecord:
    private byte[] data
jxl.read.biff.SharedFormulaRecord:
    private jxl.biff.formula.ExternalSheet externalSheet
jxl.read.biff.SharedNumberFormulaRecord:
    private jxl.biff.FormattingRecords formattingRecords
jxl.read.biff.SheetImpl:
    private jxl.read.biff.RowRecord[] rowRecords
    private java.util.ArrayList images
    336:336:public jxl.Cell getCell(java.lang.String)
    378:379:public jxl.Cell findCell(java.lang.String)
    403:404:public jxl.Cell findCell(java.lang.String,int,int,int,int,boolean)
    433:434:public jxl.Cell findCell(java.util.regex.Pattern,int,int,int,int,boolean)
    456:457:public jxl.LabelCell findLabelCell(java.lang.String)
    546:573:public jxl.Cell[] getColumn(int)
    604:604:public boolean isHidden()
    616:642:public jxl.read.biff.ColumnInfoRecord getColumnInfo(int)
    869:889:jxl.read.biff.RowRecord getRowInfo(int)
    948:948:public boolean isProtected()
    992:993:public jxl.format.CellFormat getColumnFormat(int)
    1005:1005:public int getColumnWidth(int)
    1017:1033:public jxl.CellView getColumnView(int)
    1046:1046:public int getRowHeight(int)
    1058:1078:public jxl.CellView getRowView(int)
    1131:1136:public int getNumberOfImages()
    1147:1152:public jxl.Image getDrawing(int)
    1160:1175:private void initializeImages()
    1182:1192:public jxl.biff.drawing.DrawingData getDrawingData()
jxl.read.biff.SheetReader:
    1859:1859:jxl.biff.drawing.DrawingData getDrawingData()
jxl.read.biff.SortRecord
jxl.read.biff.StringFormulaRecord:
    private java.lang.String formulaString
    276:287:public java.lang.String getFormula()
jxl.read.biff.SupbookRecord:
    234:234:public byte[] getData()
jxl.read.biff.Window2Record:
    128:128:public boolean isSelected()
    168:168:public boolean getFrozenNotSplit()
    188:188:public int getPageBreakPreviewMagnificaiton()
    198:198:public int getNormalMagnificaiton()
jxl.read.biff.WorkbookParser:
    212:213:public jxl.Sheet[] getSheets()
    225:225:public jxl.Sheet getReadSheet(int)
    271:290:public jxl.Sheet getSheet(java.lang.String)
    300:309:public java.lang.String[] getSheetNames()
    325:334:public int getExternalSheetIndex(int)
    349:358:public int getLastExternalSheetIndex(int)
    455:497:public java.lang.String getLastExternalSheetName(int)
    962:962:public jxl.biff.drawing.MsoDrawingGroupRecord getMsoDrawingGroupRecord()
    1010:1011:public jxl.Cell getCell(java.lang.String)
    1025:1048:public jxl.Cell findCellByName(java.lang.String)
    1067:1090:public jxl.Range[] findByName(java.lang.String)
    1100:1104:public java.lang.String[] getRangeNames()
    1157:1157:public int getLastExternalSheetIndex(java.lang.String)
    1263:1281:public int getIndex(jxl.Sheet)
jxl.write.Alignment
jxl.write.Blank:
    80:81:protected Blank(int,int,jxl.write.Blank)
    92:92:public jxl.write.WritableCell copyTo(int,int)
jxl.write.BoldStyle
jxl.write.Boolean:
    42:43:public Boolean(int,int,boolean)
    57:58:public Boolean(int,int,boolean,jxl.format.CellFormat)
    80:81:protected Boolean(int,int,jxl.write.Boolean)
    89:90:public void setValue(boolean)
    101:101:public jxl.write.WritableCell copyTo(int,int)
jxl.write.Border
jxl.write.BorderLineStyle
jxl.write.Colour
jxl.write.DateFormats:
    27:32:public DateFormats()
jxl.write.DateFormats$BuiltInFormat:
    103:103:public java.lang.String getFormatString()
jxl.write.DateTime:
    58:59:public DateTime(int,int,java.util.Date)
    73:74:public DateTime(int,int,java.util.Date,jxl.write.biff.DateRecord$GMTDate)
    86:87:public DateTime(int,int,java.util.Date,jxl.format.CellFormat)
    101:102:public DateTime(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)
    118:119:public DateTime(int,int,java.util.Date,jxl.format.CellFormat,boolean)
    141:142:protected DateTime(int,int,jxl.write.DateTime)
    152:153:public void setDate(java.util.Date)
    163:164:public void setDate(java.util.Date,jxl.write.biff.DateRecord$GMTDate)
    175:175:public jxl.write.WritableCell copyTo(int,int)
jxl.write.Font
jxl.write.Formula
jxl.write.Label:
    56:57:public Label(int,int,java.lang.String,jxl.format.CellFormat)
    68:69:protected Label(int,int,jxl.write.Label)
    101:101:public jxl.write.WritableCell copyTo(int,int)
jxl.write.Number:
    42:43:public Number(int,int,double)
    58:59:public Number(int,int,double,jxl.format.CellFormat)
    79:80:public void setValue(double)
    91:92:protected Number(int,int,jxl.write.Number)
    103:103:public jxl.write.WritableCell copyTo(int,int)
jxl.write.NumberFormat
jxl.write.NumberFormats:
    28:33:public NumberFormats()
jxl.write.NumberFormats$BuiltInFormat:
    104:104:public java.lang.String getFormatString()
jxl.write.Pattern
jxl.write.VerticalAlignment
jxl.write.WritableCell:
    public abstract jxl.write.WritableCell copyTo(int,int)
jxl.write.WritableCellFeatures:
    74:75:public void setComment(java.lang.String)
    87:88:public void setComment(java.lang.String,double,double)
    116:117:public void setDataValidationList(java.util.Collection)
    129:130:public void setDataValidationRange(int,int,int,int)
    141:142:public void setDataValidationRange(java.lang.String)
    153:154:public void setNumberValidation(double,jxl.biff.BaseCellFeatures$ValidationCondition)
    167:168:public void setNumberValidation(double,double,jxl.biff.BaseCellFeatures$ValidationCondition)
jxl.write.WritableCellFormat:
    96:97:public WritableCellFormat(jxl.format.CellFormat)
    129:130:public void setOrientation(jxl.format.Orientation)
    142:143:public void setWrap(boolean)
    179:180:public void setBackground(jxl.format.Colour)
    191:192:public void setBackground(jxl.format.Colour,jxl.format.Pattern)
    202:203:public void setShrinkToFit(boolean)
    212:213:public void setIndentation(int)
    226:227:public void setLocked(boolean)
jxl.write.WritableFont:
    public static final int DEFAULT_POINT_SIZE
    149:153:public WritableFont(jxl.write.WritableFont$FontName,int)
    164:168:public WritableFont(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle)
    181:185:public WritableFont(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean)
    203:204:public WritableFont(jxl.write.WritableFont$FontName,int,jxl.write.WritableFont$BoldStyle,boolean,jxl.format.UnderlineStyle)
    263:264:public void setPointSize(int)
    274:275:public void setBoldStyle(jxl.write.WritableFont$BoldStyle)
    286:287:public void setItalic(boolean)
    298:299:public void setUnderlineStyle(jxl.format.UnderlineStyle)
    310:311:public void setColour(jxl.format.Colour)
    322:323:public void setScriptStyle(jxl.format.ScriptStyle)
    344:345:public void setStruckout(boolean)
    357:357:public static jxl.write.WritableFont$FontName createFont(java.lang.String)
jxl.write.WritableHyperlink:
    54:55:public WritableHyperlink(int,int,java.net.URL)
    68:69:public WritableHyperlink(int,int,int,int,java.net.URL)
    88:89:public WritableHyperlink(int,int,int,int,java.net.URL,java.lang.String)
    100:101:public WritableHyperlink(int,int,java.io.File)
    113:114:public WritableHyperlink(int,int,java.io.File,java.lang.String)
    128:129:public WritableHyperlink(int,int,int,int,java.io.File)
    148:149:public WritableHyperlink(int,int,int,int,java.io.File,java.lang.String)
    166:169:public WritableHyperlink(int,int,java.lang.String,jxl.write.WritableSheet,int,int)
    192:196:public WritableHyperlink(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)
    205:206:public void setURL(java.net.URL)
    215:216:public void setFile(java.io.File)
    225:226:public void setDescription(java.lang.String)
    243:244:public void setLocation(java.lang.String,jxl.write.WritableSheet,int,int,int,int)
jxl.write.WritableImage:
    73:74:public WritableImage(double,double,double,double,java.io.File)
    91:92:public WritableImage(double,double,double,double,byte[])
    112:112:public double getColumn()
    122:123:public void setColumn(double)
    132:132:public double getRow()
    142:143:public void setRow(double)
    152:152:public double getWidth()
    164:165:public void setWidth(double)
    174:174:public double getHeight()
    186:187:public void setHeight(double)
    196:196:public java.io.File getImageFile()
    214:215:public void setImageAnchor(jxl.biff.drawing.Drawing$ImageAnchorProperties)
    222:222:public jxl.biff.drawing.Drawing$ImageAnchorProperties getImageAnchor()
jxl.write.WritableSheet:
    public abstract void setName(java.lang.String)
    public abstract void setHidden(boolean)
    public abstract void setProtected(boolean)
    public abstract void setColumnView(int,int)
    public abstract void setColumnView(int,int,jxl.format.CellFormat)
    public abstract void setColumnView(int,jxl.CellView)
    public abstract void setRowView(int,int)
    public abstract void setRowView(int,boolean)
    public abstract void setRowView(int,int,boolean)
    public abstract void setRowView(int,jxl.CellView)
    public abstract jxl.write.WritableCell getWritableCell(java.lang.String)
    public abstract jxl.write.WritableHyperlink[] getWritableHyperlinks()
    public abstract void insertRow(int)
    public abstract void insertColumn(int)
    public abstract void removeColumn(int)
    public abstract void removeRow(int)
    public abstract jxl.Range mergeCells(int,int,int,int)
    public abstract void setRowGroup(int,int,boolean)
    public abstract void unsetRowGroup(int,int)
    public abstract void setColumnGroup(int,int,boolean)
    public abstract void unsetColumnGroup(int,int)
    public abstract void unmergeCells(jxl.Range)
    public abstract void addHyperlink(jxl.write.WritableHyperlink)
    public abstract void removeHyperlink(jxl.write.WritableHyperlink)
    public abstract void removeHyperlink(jxl.write.WritableHyperlink,boolean)
    public abstract void setHeader(java.lang.String,java.lang.String,java.lang.String)
    public abstract void setFooter(java.lang.String,java.lang.String,java.lang.String)
    public abstract void setPageSetup(jxl.format.PageOrientation)
    public abstract void setPageSetup(jxl.format.PageOrientation,double,double)
    public abstract void setPageSetup(jxl.format.PageOrientation,jxl.format.PaperSize,double,double)
    public abstract void addRowPageBreak(int)
    public abstract void addColumnPageBreak(int)
    public abstract void addImage(jxl.write.WritableImage)
    public abstract int getNumberOfImages()
    public abstract jxl.write.WritableImage getImage(int)
    public abstract void removeImage(jxl.write.WritableImage)
    public abstract void applySharedDataValidation(jxl.write.WritableCell,int,int)
    public abstract void removeSharedDataValidation(jxl.write.WritableCell)
jxl.write.WritableWorkbook:
    public abstract jxl.write.WritableSheet[] getSheets()
    public abstract java.lang.String[] getSheetNames()
    public abstract jxl.write.WritableSheet getSheet(java.lang.String)
    public abstract jxl.write.WritableCell getWritableCell(java.lang.String)
    public abstract int getNumberOfSheets()
    public abstract jxl.write.WritableSheet createSheet(java.lang.String,int)
    public abstract jxl.write.WritableSheet importSheet(java.lang.String,int,jxl.Sheet)
    public abstract void copySheet(int,java.lang.String,int)
    public abstract void copySheet(java.lang.String,java.lang.String,int)
    public abstract void removeSheet(int)
    public abstract jxl.write.WritableSheet moveSheet(int,int)
    public abstract void setProtected(boolean)
    public abstract void setColourRGB(jxl.format.Colour,int,int,int)
    238:238:public void copy(jxl.Workbook)
    public abstract jxl.write.WritableCell findCellByName(java.lang.String)
    public abstract jxl.Range[] findByName(java.lang.String)
    public abstract java.lang.String[] getRangeNames()
    public abstract void removeRangeName(java.lang.String)
    public abstract void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int)
    public abstract void setOutputFile(java.io.File)
jxl.write.biff.ArbitraryRecord
jxl.write.biff.BlankRecord:
    84:85:protected BlankRecord(int,int,jxl.write.biff.BlankRecord)
jxl.write.biff.BooleanRecord:
    49:51:protected BooleanRecord(int,int,boolean)
    64:66:protected BooleanRecord(int,int,boolean,jxl.format.CellFormat)
    88:90:protected BooleanRecord(int,int,jxl.write.biff.BooleanRecord)
    133:134:protected void setValue(boolean)
jxl.write.biff.ButtonPropertySetRecord:
    50:53:public ButtonPropertySetRecord(jxl.write.biff.ButtonPropertySetRecord)
jxl.write.biff.CalcCountRecord:
    private byte[] data
jxl.write.biff.CellValue:
    167:180:protected CellValue(jxl.biff.Type,int,int,jxl.write.biff.CellValue)
    234:248:public boolean isHidden()
    323:334:void incrementRow()
    342:358:void decrementRow()
    366:378:void incrementColumn()
    386:398:void decrementColumn()
    410:410:void columnInserted(jxl.Sheet,int,int)
    422:422:void columnRemoved(jxl.Sheet,int,int)
    434:434:void rowInserted(jxl.Sheet,int,int)
    446:446:void rowRemoved(jxl.Sheet,int,int)
    630:631:public final void removeCellFeatures()
    661:662:final void setCopied(boolean)
jxl.write.biff.CellXFRecord:
    69:70:protected CellXFRecord(jxl.format.CellFormat)
    96:102:public void setBackground(jxl.format.Colour,jxl.format.Pattern)
    112:118:public void setLocked(boolean)
    127:132:public void setIndentation(int)
    141:146:public void setShrinkToFit(boolean)
    174:180:public void setOrientation(jxl.format.Orientation)
    192:198:public void setWrap(boolean)
jxl.write.biff.ColumnInfoRecord:
    83:90:public ColumnInfoRecord(int,int,jxl.biff.XFRecord)
    100:110:public ColumnInfoRecord(jxl.write.biff.ColumnInfoRecord)
    144:151:public ColumnInfoRecord(jxl.read.biff.ColumnInfoRecord,int)
    169:170:public void incrementColumn()
    178:179:public void decrementColumn()
    188:188:int getWidth()
    252:253:public void setCellFormat(jxl.biff.XFRecord)
    262:262:public int getXfIndex()
    291:291:boolean getHidden()
    362:362:public int getOutlineLevel()
    372:372:public boolean getCollapsed()
    381:382:public void incrementOutlineLevel()
    391:400:public void decrementOutlineLevel()
    409:410:public void setOutlineLevel(int)
    419:420:public void setCollapsed(boolean)
jxl.write.biff.ColumnsExceededException
jxl.write.biff.DateRecord:
    private static final int utcOffsetDays
    private static final long msInADay
    private static final int nonLeapDay
    103:104:protected DateRecord(int,int,java.util.Date)
    116:117:protected DateRecord(int,int,java.util.Date,jxl.write.biff.DateRecord$GMTDate)
    129:132:protected DateRecord(int,int,java.util.Date,jxl.format.CellFormat)
    145:148:protected DateRecord(int,int,java.util.Date,jxl.format.CellFormat,jxl.write.biff.DateRecord$GMTDate)
    161:165:protected DateRecord(int,int,java.util.Date,jxl.format.CellFormat,boolean)
    189:193:protected DateRecord(int,int,jxl.write.biff.DateRecord)
    289:291:protected void setDate(java.util.Date)
    301:303:protected void setDate(java.util.Date,jxl.write.biff.DateRecord$GMTDate)
    338:338:public java.text.DateFormat getDateFormat()
jxl.write.biff.ExtendedSSTRecord:
    private static final int infoRecordSize
jxl.write.biff.ExternalSheetRecord:
    private byte[] data
    221:221:public int getLastTabIndex(int)
    244:250:void sheetRemoved(int)
jxl.write.biff.ExternalSheetRecord$XTI:
    76:95:void sheetRemoved(int)
jxl.write.biff.File:
    private int pos
    183:190:public void setOutputFile(java.io.OutputStream)
jxl.write.biff.FooterRecord:
    61:64:public FooterRecord(jxl.write.biff.FooterRecord)
jxl.write.biff.FormulaRecord
jxl.write.biff.GuttersRecord:
    83:83:public int getMaxRowOutline()
    104:104:public int getMaxColumnOutline()
jxl.write.biff.HeaderRecord:
    60:63:public HeaderRecord(jxl.write.biff.HeaderRecord)
jxl.write.biff.HyperlinkRecord:
    248:262:protected HyperlinkRecord(int,int,int,int,java.net.URL,java.lang.String)
    277:298:protected HyperlinkRecord(int,int,int,int,java.io.File,java.lang.String)
    321:335:protected HyperlinkRecord(int,int,int,int,java.lang.String,jxl.write.WritableSheet,int,int,int,int)
    384:384:public int getRow()
    394:394:public int getColumn()
    404:404:public int getLastRow()
    414:414:public int getLastColumn()
    424:424:public java.net.URL getURL()
    434:434:public java.io.File getFile()
    567:567:public jxl.Range getRange()
    577:613:public void setURL(java.net.URL)
    622:642:public void setFile(java.io.File)
    659:680:protected void setLocation(java.lang.String,jxl.write.WritableSheet,int,int,int,int)
    695:733:private void setLocation(jxl.write.WritableSheet,int,int,int,int)
    744:769:void insertRow(int)
    780:805:void insertColumn(int)
    816:842:void removeRow(int)
    853:879:void removeColumn(int)
    1243:1247:void initialize(jxl.write.WritableSheet)
    1257:1257:java.lang.String getContents()
    1267:1269:protected void setContents(java.lang.String)
jxl.write.biff.LabelRecord:
    85:92:protected LabelRecord(int,int,java.lang.String,jxl.format.CellFormat)
    104:106:protected LabelRecord(int,int,jxl.write.biff.LabelRecord)
jxl.write.biff.MergedCells:
    private static final int maxRangesPerSheet
    90:97:void insertRow(int)
    104:111:void insertColumn(int)
    118:135:void removeColumn(int)
    142:159:void removeRow(int)
    186:192:void unmergeCells(jxl.Range)
jxl.write.biff.NameRecord:
    private static final int cellReference
    private static final int areaReference
    private static final int subExpression
    private static final int union
    202:216:NameRecord(java.lang.String,int,int,int,int,int,int,boolean)
    441:441:public int getSheetRef()
    451:453:public void setSheetRef(int)
    461:461:public jxl.write.biff.NameRecord$NameRange[] getRanges()
    472:491:void rowInserted(int,int)
    502:555:boolean rowRemoved(int,int)
    567:621:boolean columnRemoved(int,int)
    633:652:void columnInserted(int,int)
jxl.write.biff.NameRecord$NameRange:
    105:105:int getFirstColumn()
    106:106:int getFirstRow()
    107:107:int getLastColumn()
    108:108:int getLastRow()
    109:109:int getExternalSheet()
    111:111:void incrementFirstRow()
    112:112:void incrementLastRow()
    113:113:void decrementFirstRow()
    114:114:void decrementLastRow()
    115:115:void incrementFirstColumn()
    116:116:void incrementLastColumn()
    117:117:void decrementFirstColumn()
    118:118:void decrementLastColumn()
jxl.write.biff.NumberFormatRecord
jxl.write.biff.NumberFormatRecord$NonValidatingFormat
jxl.write.biff.NumberRecord:
    62:64:protected NumberRecord(int,int,double)
    77:79:protected NumberRecord(int,int,double,jxl.format.CellFormat)
    101:103:protected NumberRecord(int,int,jxl.write.biff.NumberRecord)
    167:168:public void setValue(double)
    178:178:public java.text.NumberFormat getNumberFormat()
jxl.write.biff.PLSRecord:
    54:58:public PLSRecord(jxl.write.biff.PLSRecord)
jxl.write.biff.PaletteRecord
jxl.write.biff.PaneRecord:
    private static final int topLeftPane
    private static final int bottomLeftPane
    private static final int topRightPane
    private static final int bottomRightPane
jxl.write.biff.ReadDateFormulaRecord:
    74:74:public java.text.DateFormat getDateFormat()
jxl.write.biff.ReadFormulaRecord:
    220:230:public byte[] getFormulaBytes()
    242:242:public jxl.write.WritableCell copyTo(int,int)
    272:292:void columnInserted(jxl.Sheet,int,int)
    306:326:void columnRemoved(jxl.Sheet,int,int)
    340:360:void rowInserted(jxl.Sheet,int,int)
    374:394:void rowRemoved(jxl.Sheet,int,int)
    413:413:public java.lang.String getFormula()
    428:445:public boolean handleImportedCellReferences(jxl.biff.formula.ExternalSheet,jxl.biff.WorkbookMethods,jxl.WorkbookSettings)
jxl.write.biff.ReadNumberFormulaRecord:
    70:70:public java.text.NumberFormat getNumberFormat()
jxl.write.biff.RowRecord:
    private byte[] data
    private static final int growSize
    private static final int maxRKValue
    private static final int minRKValue
    155:165:public void setRowHeight(int)
    206:207:public void setCollapsed(boolean)
    216:216:public int getRowNumber()
    278:284:public void removeCell(int)
    486:495:void incrementRow()
    503:511:void decrementRow()
    523:557:void insertColumn(int)
    568:595:void removeColumn(int)
    604:604:public boolean isDefaultHeight()
    614:614:public int getRowHeight()
    624:624:public boolean isCollapsed()
    647:647:jxl.biff.XFRecord getStyle()
    657:657:boolean hasDefaultFormat()
    667:667:boolean matchesDefaultFontHeight()
    677:677:public int getOutlineLevel()
    687:687:public boolean getGroupStart()
    695:696:public void incrementOutlineLevel()
    705:714:public void decrementOutlineLevel()
    723:724:public void setOutlineLevel(int)
    733:734:public void setGroupStart(boolean)
jxl.write.biff.SetupRecord:
    146:147:public void setOrientation(jxl.format.PageOrientation)
    156:157:public void setOrder(jxl.format.PageOrder)
    167:169:public void setMargins(double,double)
    178:179:public void setPaperSize(jxl.format.PaperSize)
jxl.write.biff.SheetCopier:
    private java.util.HashMap xfRecords
    private java.util.HashMap fonts
    private java.util.HashMap formats
    432:531:public void copyWritableSheet()
    538:796:public void importSheet()
    863:915:private jxl.write.WritableCell deepCopyCell(jxl.Cell)
    971:1009:void deepCopyCells()
    1024:1045:private jxl.write.WritableCellFormat copyCellFormat(jxl.format.CellFormat)
    1054:1090:private void importNames()
jxl.write.biff.SheetWriter:
    private jxl.write.biff.HeaderRecord header
    private jxl.write.biff.FooterRecord footer
    609:609:final jxl.write.biff.HeaderRecord getHeader()
    619:619:final jxl.write.biff.FooterRecord getFooter()
    678:678:jxl.biff.WorkspaceInformationRecord getWorkspaceOptions()
jxl.write.biff.SortRecord
jxl.write.biff.StyleXFRecord
jxl.write.biff.SupbookRecord:
    162:164:private void initInternal(jxl.read.biff.SupbookRecord)
jxl.write.biff.WritableFontRecord:
    68:74:protected void setPointSize(int)
    84:90:protected void setBoldStyle(int)
    101:107:protected void setItalic(boolean)
    118:124:protected void setUnderlineStyle(int)
    135:141:protected void setColour(int)
    152:158:protected void setScriptStyle(int)
    168:173:protected void setStruckout(boolean)
jxl.write.biff.WritableFonts
jxl.write.biff.WritableFormattingRecords
jxl.write.biff.WritableSheetCopier
jxl.write.biff.WritableSheetImpl:
    private static final int rowGrowSize
    private static final int numRowsPerSheet
    private static final int maxSheetNameLength
    367:367:public jxl.Cell getCell(java.lang.String)
    395:395:public jxl.write.WritableCell getWritableCell(java.lang.String)
    454:455:public jxl.Cell findCell(java.lang.String)
    479:480:public jxl.Cell findCell(java.lang.String,int,int,int,int,boolean)
    509:510:public jxl.Cell findCell(java.util.regex.Pattern,int,int,int,int,boolean)
    532:533:public jxl.LabelCell findLabelCell(java.lang.String)
    545:566:public jxl.Cell[] getRow(int)
    578:600:public jxl.Cell[] getColumn(int)
    621:714:public void insertRow(int)
    726:833:public void insertColumn(int)
    843:981:public void removeColumn(int)
    991:1111:public void removeRow(int)
    1247:1252:jxl.write.biff.RowRecord getRowInfo(int)
    1292:1293:public void setName(java.lang.String)
    1303:1304:public void setHidden(boolean)
    1314:1315:public void setProtected(boolean)
    1323:1324:public void setSelected()
    1334:1334:public boolean isHidden()
    1345:1348:public void setColumnView(int,int)
    1360:1364:public void setColumnView(int,int,jxl.format.CellFormat)
    1374:1426:public void setColumnView(int,jxl.CellView)
    1439:1443:public void setRowView(int,int)
    1456:1459:public void setRowView(int,boolean)
    1475:1479:public void setRowView(int,int,boolean)
    1490:1519:public void setRowView(int,jxl.CellView)
    1604:1627:void copy(jxl.write.WritableSheet)
    1636:1636:final jxl.write.biff.HeaderRecord getHeader()
    1646:1646:final jxl.write.biff.FooterRecord getFooter()
    1656:1656:public boolean isProtected()
    1666:1673:public jxl.Hyperlink[] getHyperlinks()
    1683:1683:public jxl.Range[] getMergedCells()
    1693:1700:public jxl.write.WritableHyperlink[] getWritableHyperlinks()
    1717:1718:public void removeHyperlink(jxl.write.WritableHyperlink)
    1737:1746:public void removeHyperlink(jxl.write.WritableHyperlink,boolean)
    1759:1828:public void addHyperlink(jxl.write.WritableHyperlink)
    1846:1861:public jxl.Range mergeCells(int,int,int,int)
    1877:1892:public void setRowGroup(int,int,boolean)
    1905:1931:public void unsetRowGroup(int,int)
    1945:1968:public void setColumnGroup(int,int,boolean)
    1981:2001:public void unsetColumnGroup(int,int)
    2011:2012:public void unmergeCells(jxl.Range)
    2024:2029:public void setHeader(java.lang.String,java.lang.String,java.lang.String)
    2041:2046:public void setFooter(java.lang.String,java.lang.String,java.lang.String)
    2056:2057:public void setPageSetup(jxl.format.PageOrientation)
    2069:2072:public void setPageSetup(jxl.format.PageOrientation,double,double)
    2086:2090:public void setPageSetup(jxl.format.PageOrientation,jxl.format.PaperSize,double,double)
    2118:2133:public void addRowPageBreak(int)
    2143:2158:public void addColumnPageBreak(int)
    2177:2179:private jxl.biff.drawing.DrawingGroupObject[] getDrawings()
    2209:2209:private jxl.biff.WorkspaceInformationRecord getWorkspaceOptions()
    2264:2264:public jxl.format.CellFormat getColumnFormat(int)
    2277:2277:public int getColumnWidth(int)
    2290:2290:public int getRowHeight(int)
    2312:2339:public jxl.CellView getRowView(int)
    2352:2368:public jxl.CellView getColumnView(int)
    2378:2421:public void addImage(jxl.write.WritableImage)
    2430:2430:public int getNumberOfImages()
    2441:2441:public jxl.write.WritableImage getImage(int)
    2452:2452:public jxl.Image getDrawing(int)
    2463:2467:public void removeImage(jxl.write.WritableImage)
    2557:2563:public int[] getRowPageBreaks()
    2573:2579:public int[] getColumnPageBreaks()
    2618:2618:public jxl.biff.DataValidation getDataValidation()
    2685:2709:void importSheet(jxl.Sheet)
    2724:2822:public void applySharedDataValidation(jxl.write.WritableCell,int,int)
    2834:2896:public void removeSharedDataValidation(jxl.write.WritableCell)
jxl.write.biff.WritableWorkbookImpl:
    182:215:public WritableWorkbookImpl(java.io.OutputStream,boolean,jxl.WorkbookSettings)
    362:368:public jxl.write.WritableSheet[] getSheets()
    397:397:public jxl.Sheet getReadSheet(int)
    420:434:public jxl.write.WritableSheet getSheet(java.lang.String)
    469:471:public void setOutputFile(java.io.File)
    538:538:public jxl.write.WritableSheet createSheet(java.lang.String,int)
    550:600:public void removeSheet(int)
    613:621:public jxl.write.WritableSheet moveSheet(int,int)
    985:988:public void copySheet(int,java.lang.String,int)
    1000:1003:public void copySheet(java.lang.String,java.lang.String,int)
    1012:1013:public void setProtected(boolean)
    1095:1114:public java.lang.String getLastExternalSheetName(int)
    1137:1146:public int getExternalSheetIndex(int)
    1157:1166:public int getLastExternalSheetIndex(int)
    1268:1306:public int getLastExternalSheetIndex(java.lang.String)
    1319:1320:public void setColourRGB(jxl.format.Colour,int,int,int)
    1329:1329:public jxl.format.RGB getColourRGB(jxl.format.Colour)
    1377:1393:void columnInserted(jxl.write.biff.WritableSheetImpl,int)
    1404:1436:void columnRemoved(jxl.write.biff.WritableSheetImpl,int)
    1447:1465:void rowInserted(jxl.write.biff.WritableSheetImpl,int)
    1476:1507:void rowRemoved(jxl.write.biff.WritableSheetImpl,int)
    1520:1535:public jxl.write.WritableCell findCellByName(java.lang.String)
    1554:1577:public jxl.Range[] findByName(java.lang.String)
    1602:1605:void removeDrawing(jxl.biff.drawing.Drawing)
    1626:1631:jxl.biff.drawing.DrawingGroup createDrawingGroup()
    1641:1653:public java.lang.String[] getRangeNames()
    1663:1689:public void removeRangeName(java.lang.String)
    1718:1719:public void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int)
    1741:1762:void addNameArea(java.lang.String,jxl.write.WritableSheet,int,int,int,int,boolean)
    1881:1882:public jxl.write.WritableCell getWritableCell(java.lang.String)
    1896:1899:public jxl.write.WritableSheet importSheet(java.lang.String,int,jxl.Sheet)
jxl.write.biff.WriteAccessRecord:
    private static final java.lang.String authorString
    private java.lang.String userName
